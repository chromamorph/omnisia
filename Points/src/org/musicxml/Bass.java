//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.musicxml;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches. The arrangement attribute specifies where the bass is displayed relative to what precedes it.
 * 
 * <p>Java class for bass complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="bass">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="bass-separator" type="{}style-text" minOccurs="0"/>
 *         <element name="bass-step" type="{}bass-step"/>
 *         <element name="bass-alter" type="{}harmony-alter" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="arrangement" type="{}harmony-arrangement" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "bass", propOrder = {
    "bassSeparator",
    "bassStep",
    "bassAlter"
})
public class Bass {

    @XmlElement(name = "bass-separator")
    protected StyleText bassSeparator;
    @XmlElement(name = "bass-step", required = true)
    protected BassStep bassStep;
    @XmlElement(name = "bass-alter")
    protected HarmonyAlter bassAlter;
    @XmlAttribute(name = "arrangement")
    protected HarmonyArrangement arrangement;

    /**
     * Gets the value of the bassSeparator property.
     * 
     * @return
     *     possible object is
     *     {@link StyleText }
     *     
     */
    public StyleText getBassSeparator() {
        return bassSeparator;
    }

    /**
     * Sets the value of the bassSeparator property.
     * 
     * @param value
     *     allowed object is
     *     {@link StyleText }
     *     
     */
    public void setBassSeparator(StyleText value) {
        this.bassSeparator = value;
    }

    /**
     * Gets the value of the bassStep property.
     * 
     * @return
     *     possible object is
     *     {@link BassStep }
     *     
     */
    public BassStep getBassStep() {
        return bassStep;
    }

    /**
     * Sets the value of the bassStep property.
     * 
     * @param value
     *     allowed object is
     *     {@link BassStep }
     *     
     */
    public void setBassStep(BassStep value) {
        this.bassStep = value;
    }

    /**
     * Gets the value of the bassAlter property.
     * 
     * @return
     *     possible object is
     *     {@link HarmonyAlter }
     *     
     */
    public HarmonyAlter getBassAlter() {
        return bassAlter;
    }

    /**
     * Sets the value of the bassAlter property.
     * 
     * @param value
     *     allowed object is
     *     {@link HarmonyAlter }
     *     
     */
    public void setBassAlter(HarmonyAlter value) {
        this.bassAlter = value;
    }

    /**
     * Gets the value of the arrangement property.
     * 
     * @return
     *     possible object is
     *     {@link HarmonyArrangement }
     *     
     */
    public HarmonyArrangement getArrangement() {
        return arrangement;
    }

    /**
     * Sets the value of the arrangement property.
     * 
     * @param value
     *     allowed object is
     *     {@link HarmonyArrangement }
     *     
     */
    public void setArrangement(HarmonyArrangement value) {
        this.arrangement = value;
    }

}

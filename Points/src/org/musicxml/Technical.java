//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.musicxml;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElementRef;
import jakarta.xml.bind.annotation.XmlElementRefs;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * Technical indications give performance information for individual instruments.
 * 
 * <p>Java class for technical complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="technical">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <choice maxOccurs="unbounded" minOccurs="0">
 *         <element name="up-bow" type="{}empty-placement"/>
 *         <element name="down-bow" type="{}empty-placement"/>
 *         <element name="harmonic" type="{}harmonic"/>
 *         <element name="open-string" type="{}empty-placement"/>
 *         <element name="thumb-position" type="{}empty-placement"/>
 *         <element name="fingering" type="{}fingering"/>
 *         <element name="pluck" type="{}placement-text"/>
 *         <element name="double-tongue" type="{}empty-placement"/>
 *         <element name="triple-tongue" type="{}empty-placement"/>
 *         <element name="stopped" type="{}empty-placement-smufl"/>
 *         <element name="snap-pizzicato" type="{}empty-placement"/>
 *         <element name="fret" type="{}fret"/>
 *         <element name="string" type="{}string"/>
 *         <element name="hammer-on" type="{}hammer-on-pull-off"/>
 *         <element name="pull-off" type="{}hammer-on-pull-off"/>
 *         <element name="bend" type="{}bend"/>
 *         <element name="tap" type="{}tap"/>
 *         <element name="heel" type="{}heel-toe"/>
 *         <element name="toe" type="{}heel-toe"/>
 *         <element name="fingernails" type="{}empty-placement"/>
 *         <element name="hole" type="{}hole"/>
 *         <element name="arrow" type="{}arrow"/>
 *         <element name="handbell" type="{}handbell"/>
 *         <element name="brass-bend" type="{}empty-placement"/>
 *         <element name="flip" type="{}empty-placement"/>
 *         <element name="smear" type="{}empty-placement"/>
 *         <element name="open" type="{}empty-placement-smufl"/>
 *         <element name="half-muted" type="{}empty-placement-smufl"/>
 *         <element name="harmon-mute" type="{}harmon-mute"/>
 *         <element name="golpe" type="{}empty-placement"/>
 *         <element name="other-technical" type="{}other-placement-text"/>
 *       </choice>
 *       <attGroup ref="{}optional-unique-id"/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "technical", propOrder = {
    "upBowOrDownBowOrHarmonic"
})
public class Technical {

    @XmlElementRefs({
        @XmlElementRef(name = "up-bow", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "down-bow", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "harmonic", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "open-string", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "thumb-position", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "fingering", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "pluck", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "double-tongue", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "triple-tongue", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "stopped", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "snap-pizzicato", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "fret", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "string", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "hammer-on", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "pull-off", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "bend", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "tap", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "heel", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "toe", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "fingernails", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "hole", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "arrow", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "handbell", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "brass-bend", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "flip", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "smear", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "open", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "half-muted", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "harmon-mute", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "golpe", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "other-technical", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> upBowOrDownBowOrHarmonic;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected java.lang.String id;

    /**
     * Gets the value of the upBowOrDownBowOrHarmonic property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the upBowOrDownBowOrHarmonic property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUpBowOrDownBowOrHarmonic().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link Arrow }{@code >}
     * {@link JAXBElement }{@code <}{@link Bend }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacementSmufl }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacementSmufl }{@code >}
     * {@link JAXBElement }{@code <}{@link EmptyPlacementSmufl }{@code >}
     * {@link JAXBElement }{@code <}{@link Fingering }{@code >}
     * {@link JAXBElement }{@code <}{@link Fret }{@code >}
     * {@link JAXBElement }{@code <}{@link HammerOnPullOff }{@code >}
     * {@link JAXBElement }{@code <}{@link HammerOnPullOff }{@code >}
     * {@link JAXBElement }{@code <}{@link Handbell }{@code >}
     * {@link JAXBElement }{@code <}{@link HarmonMute }{@code >}
     * {@link JAXBElement }{@code <}{@link Harmonic }{@code >}
     * {@link JAXBElement }{@code <}{@link HeelToe }{@code >}
     * {@link JAXBElement }{@code <}{@link HeelToe }{@code >}
     * {@link JAXBElement }{@code <}{@link Hole }{@code >}
     * {@link JAXBElement }{@code <}{@link OtherPlacementText }{@code >}
     * {@link JAXBElement }{@code <}{@link PlacementText }{@code >}
     * {@link JAXBElement }{@code <}{@link org.musicxml.String }{@code >}
     * {@link JAXBElement }{@code <}{@link Tap }{@code >}
     * 
     * 
     * @return
     *     The value of the upBowOrDownBowOrHarmonic property.
     */
    public List<JAXBElement<?>> getUpBowOrDownBowOrHarmonic() {
        if (upBowOrDownBowOrHarmonic == null) {
            upBowOrDownBowOrHarmonic = new ArrayList<>();
        }
        return this.upBowOrDownBowOrHarmonic;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String }
     *     
     */
    public java.lang.String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String }
     *     
     */
    public void setId(java.lang.String value) {
        this.id = value;
    }

}

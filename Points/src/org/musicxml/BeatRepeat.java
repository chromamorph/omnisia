//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.musicxml;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;


/**
 * The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). The value for slashes is 1 and the value for use-dots is no if not specified.
 * 
 * The stop type indicates the first beat where the repeats are no longer displayed. Both the start and stop of the beat being repeated should be specified unless the repeats are displayed through the end of the part.
 * 
 * The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.
 * 
 * <p>Java class for beat-repeat complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="beat-repeat">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <group ref="{}slash" minOccurs="0"/>
 *       <attribute name="type" use="required" type="{}start-stop" />
 *       <attribute name="slashes" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" />
 *       <attribute name="use-dots" type="{}yes-no" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "beat-repeat", propOrder = {
    "slashType",
    "slashDot",
    "exceptVoice"
})
public class BeatRepeat {

    @XmlElement(name = "slash-type")
    protected java.lang.String slashType;
    @XmlElement(name = "slash-dot")
    protected List<Empty> slashDot;
    @XmlElement(name = "except-voice")
    protected List<java.lang.String> exceptVoice;
    @XmlAttribute(name = "type", required = true)
    protected StartStop type;
    @XmlAttribute(name = "slashes")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger slashes;
    @XmlAttribute(name = "use-dots")
    protected YesNo useDots;

    /**
     * Gets the value of the slashType property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String }
     *     
     */
    public java.lang.String getSlashType() {
        return slashType;
    }

    /**
     * Sets the value of the slashType property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String }
     *     
     */
    public void setSlashType(java.lang.String value) {
        this.slashType = value;
    }

    /**
     * Gets the value of the slashDot property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the slashDot property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSlashDot().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Empty }
     * 
     * 
     * @return
     *     The value of the slashDot property.
     */
    public List<Empty> getSlashDot() {
        if (slashDot == null) {
            slashDot = new ArrayList<>();
        }
        return this.slashDot;
    }

    /**
     * Gets the value of the exceptVoice property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the exceptVoice property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExceptVoice().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link java.lang.String }
     * 
     * 
     * @return
     *     The value of the exceptVoice property.
     */
    public List<java.lang.String> getExceptVoice() {
        if (exceptVoice == null) {
            exceptVoice = new ArrayList<>();
        }
        return this.exceptVoice;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link StartStop }
     *     
     */
    public StartStop getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link StartStop }
     *     
     */
    public void setType(StartStop value) {
        this.type = value;
    }

    /**
     * Gets the value of the slashes property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getSlashes() {
        return slashes;
    }

    /**
     * Sets the value of the slashes property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSlashes(BigInteger value) {
        this.slashes = value;
    }

    /**
     * Gets the value of the useDots property.
     * 
     * @return
     *     possible object is
     *     {@link YesNo }
     *     
     */
    public YesNo getUseDots() {
        return useDots;
    }

    /**
     * Sets the value of the useDots property.
     * 
     * @param value
     *     allowed object is
     *     {@link YesNo }
     *     
     */
    public void setUseDots(YesNo value) {
        this.useDots = value;
    }

}

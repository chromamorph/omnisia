//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.musicxml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for stick-type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>{@code
 * <simpleType name="stick-type">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     <enumeration value="bass drum"/>
 *     <enumeration value="double bass drum"/>
 *     <enumeration value="glockenspiel"/>
 *     <enumeration value="gum"/>
 *     <enumeration value="hammer"/>
 *     <enumeration value="superball"/>
 *     <enumeration value="timpani"/>
 *     <enumeration value="wound"/>
 *     <enumeration value="xylophone"/>
 *     <enumeration value="yarn"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "stick-type")
@XmlEnum
public enum StickType {

    @XmlEnumValue("bass drum")
    BASS_DRUM("bass drum"),
    @XmlEnumValue("double bass drum")
    DOUBLE_BASS_DRUM("double bass drum"),
    @XmlEnumValue("glockenspiel")
    GLOCKENSPIEL("glockenspiel"),
    @XmlEnumValue("gum")
    GUM("gum"),
    @XmlEnumValue("hammer")
    HAMMER("hammer"),
    @XmlEnumValue("superball")
    SUPERBALL("superball"),
    @XmlEnumValue("timpani")
    TIMPANI("timpani"),
    @XmlEnumValue("wound")
    WOUND("wound"),
    @XmlEnumValue("xylophone")
    XYLOPHONE("xylophone"),
    @XmlEnumValue("yarn")
    YARN("yarn");
    private final java.lang.String value;

    StickType(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static StickType fromValue(java.lang.String v) {
        for (StickType c: StickType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

package com.chromamorph.points022;

import java.util.ArrayList;

import javax.swing.SwingUtilities;


/**
 * 
 * @author David Meredith
 * @date 12 July 2013
 *
 * Reads a MIREX COS encoding, as generated by 
 * CosiatecMirex2013 and reads a MEL encoding
 * of the same COSIATEC encoding and checks that
 * they are equivalent.
 * 
 * The program generates a MEL encoding from the
 * MIREX encoding and checks that the MEL encoding
 * generated from the MIREX encoding is identical to
 * the one generated by the COSIATECEncoding class (with
 * diatonic pitch).
 */
public class CheckMIREXCOSEncoding {

	public static void main(String[] args) {
		
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				
				//Read in MIREX encoding
				
				ArrayList<ArrayList<PointSet>> mirexOccurrenceSets = MIREX2013Entries.readMirexCosFile();
				
				//Read in MEL COSIATEC encoding
				
				ArrayList<ArrayList<PointSet>> melOccurrenceSets = MIREX2013Entries.readMelCosiatecEncoding();
				//Now print out any differences between the MEL encoding and the MIREX encoding
				
				//First check that the two occurrence set lists are the same size
				if (melOccurrenceSets.size() != mirexOccurrenceSets.size()) {
					System.out.println("Occurrence set lists are of different sizes!\nMIREX list contains "+mirexOccurrenceSets.size()+" occurrence sets\nMEL list contains "+melOccurrenceSets.size()+" occurrence sets");
					return;
				}
				
				//Now check that each corresponding occurrence set is the same size
				for(int i = 0; i < melOccurrenceSets.size(); i++) {
					ArrayList<PointSet> melOccurrenceSet = melOccurrenceSets.get(i);
					ArrayList<PointSet> mirexOccurrenceSet = mirexOccurrenceSets.get(i);
					int thisMelOccurrenceSetSize = melOccurrenceSet.size();
					int thisMirexOccurrenceSetSize = mirexOccurrenceSet.size();
					if (thisMelOccurrenceSetSize != thisMirexOccurrenceSetSize) {
						System.out.println("Unequally sized corresponding occurrence sets!\nMIREX occurrence set: "+mirexOccurrenceSet+"\nMIREX Occurrence set size: "+thisMirexOccurrenceSetSize+"\nMEL occurrence set:   "+melOccurrenceSet+"\nMEL Occurrence set size: "+thisMelOccurrenceSetSize);
						return;
					}
				}
				
				//Now check each pair of corresponding occurrences are equal.
				
				for(int i = 0; i < melOccurrenceSets.size(); i++) {
					ArrayList<PointSet> melOccurrenceSet = melOccurrenceSets.get(i);
					ArrayList<PointSet> mirexOccurrenceSet = mirexOccurrenceSets.get(i);
					for(int j = 0; j < melOccurrenceSet.size(); j++) {
						PointSet melOccurrence = melOccurrenceSet.get(j);
						PointSet mirexOccurrence = mirexOccurrenceSet.get(j);
						if (!melOccurrence.equals(mirexOccurrence)) {
							System.out.println("Corresponding occurrence unequal! mirex occurrence: "+mirexOccurrence+"; mel occurrence: "+melOccurrence+"");
							return;
						}
					}
				}
				System.out.println("The two encodings are equivalent.");
			}
			
		});
		
	}
	
}
